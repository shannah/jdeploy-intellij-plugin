# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: IntelliJ Plugin Branch
on:
  push:
    branches: '*'
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Clone jDeploy
      run: |
        git clone https://github.com/shannah/jdeploy --depth=1
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Set up Git Config
      run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
    

    - name: Build with Maven
      run: |
        cd jdeploy
        cd shared
        mvn install
        cd ../cli
        mvn install
        
    - name: Grant execute permission for gradlew
      run: |
        chmod +x ./gradlew

    - name: Build Plugin
      run: |
        ./gradlew buildPlugin

    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: plugin
        path: |
          ./build/distributions/*.zip
          
  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && !startsWith(github.ref, 'refs/pull/')
    steps:
    - uses: actions/checkout@v2

    - name: Download Artifact
      uses: actions/download-artifact@v2
      with:
        name: plugin

    - name: List plugin contents
      run: find .
      shell: bash

    - name: Get the version
      id: get_version
      run: |
        echo "##[set-output name=version;]$(echo ${GITHUB_REF#refs/*/})"
      shell: bash

    - name: Delete Existing Release if Present
      run: |
        if gh release view ${{ steps.get_version.outputs.version }}-SNAPSHOT; then
          gh release delete ${{ steps.get_version.outputs.version }}-SNAPSHOT
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.version }}-SNAPSHOT
        release_name: ${{ steps.get_version.outputs.version }}-SNAPSHOT
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./plugin/jdeploy-intellij-plugin.zip
        asset_name: jdeploy-intellij-plugin-${{ steps.get_version.outputs.version }}.zip
        asset_content_type: application/zip
